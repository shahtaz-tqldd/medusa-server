# Generated by Django 5.2 on 2025-05-20 11:15

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blogs', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=280, unique=True)),
                ('subtitle', models.CharField(blank=True, max_length=300, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=20)),
                ('excerpt', models.TextField(blank=True, help_text='Short description for SEO and previews', null=True)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='blog/featured_images/')),
                ('reading_time', models.PositiveIntegerField(default=0, help_text='Estimated reading time in minutes')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blog',
                'verbose_name_plural': 'Blogs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CodeBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField()),
                ('language', models.CharField(default='python', help_text='Programming language of the code', max_length=50)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('line_numbers', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('author_name', models.CharField(max_length=100)),
                ('author_email', models.EmailField(max_length=254)),
                ('content', models.TextField()),
                ('is_approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentBlock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('block_type', models.CharField(choices=[('text', 'Text'), ('heading', 'Heading'), ('code', 'Code'), ('image', 'Image/Diagram'), ('quote', 'Quote'), ('list', 'List')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of the content block within the blog')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Content Block',
                'verbose_name_plural': 'Content Blocks',
                'ordering': ['blog', 'order'],
            },
        ),
        migrations.CreateModel(
            name='HeadingBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=300)),
                ('level', models.PositiveSmallIntegerField(choices=[(1, 'H1'), (2, 'H2'), (3, 'H3')], default=2)),
            ],
        ),
        migrations.CreateModel(
            name='ImageBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='blog/content_images/')),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ListBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list_type', models.CharField(choices=[('ordered', 'Ordered List'), ('unordered', 'Unordered List')], default='unordered', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='ListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='QuoteBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TextBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
            ],
        ),
        migrations.DeleteModel(
            name='Blogs',
        ),
        migrations.AddField(
            model_name='blog',
            name='category',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to='blogs.category'),
        ),
        migrations.AddField(
            model_name='comment',
            name='blog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='blogs.blog'),
        ),
        migrations.AddField(
            model_name='contentblock',
            name='blog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_blocks', to='blogs.blog'),
        ),
        migrations.AddField(
            model_name='codeblock',
            name='block',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='code_content', to='blogs.contentblock'),
        ),
        migrations.AddField(
            model_name='headingblock',
            name='block',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='heading_content', to='blogs.contentblock'),
        ),
        migrations.AddField(
            model_name='imageblock',
            name='block',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='image_content', to='blogs.contentblock'),
        ),
        migrations.AddField(
            model_name='listblock',
            name='block',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='list_content', to='blogs.contentblock'),
        ),
        migrations.AddField(
            model_name='listitem',
            name='list_block',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='blogs.listblock'),
        ),
        migrations.AddField(
            model_name='quoteblock',
            name='block',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quote_content', to='blogs.contentblock'),
        ),
        migrations.AddField(
            model_name='blog',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='blogs', to='blogs.tag'),
        ),
        migrations.AddField(
            model_name='textblock',
            name='block',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='text_content', to='blogs.contentblock'),
        ),
    ]
